;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorParameterLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates parameter loop expression nodes
;; 
;;  Date:        21st March 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI
import System.IO
import CodeGen.MethodCatalogAPI

.array 0

namespace CodeGen.Engine

	public partial class ExpressionEvaluator

		private parameterLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

		private method registerParameterLoopExpressions, void
		proc
			parameterLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
			parameterLoopExpressionEvaluators.Add("COMMENT", evaluateParameterComment)
		endmethod

		;; -------------------------------------------------------------------------------------------------------------------------------
		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="tkn"></param>
		;;; <param name="template"></param>
		;;; <param name="loops"></param>
		;;; <param name="specific"></param>
		;;; <returns></returns>
		public static method EvaluateParameterLoopExpression, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			specific, @Func<SmcInterface, SmcMethod, SmcParameter, int, boolean> 
		proc
			lambda isParameterLoop(node) (node .is. ParameterLoopNode)
			data loop, @ParameterLoopNode, ^as(loops.First(isParameterLoop), ParameterLoopNode)
			mreturn specific(loop.CurrentInterface, loop.CurrentMethod, loop.CurrentParameter, loop.CurrentIndex)
		endmethod
		
		;; -------------------------------------------------------------------------------------------------------------------------------

		private static method evaluateParameterComment, boolean
			tkn, @Token
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
		proc
			lambda doEvaluate(iface, meth, param, index) (!String.IsNullOrWhiteSpace(param.Comment))
			mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
		endmethod
	
	endclass

endnamespace

