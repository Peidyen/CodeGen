
import System
import System.Collections.Generic
import System.IO
import CodeConverterInterface

.array 0

namespace CodeConverterSampleTasks
	
	public class ChangeDisplayClearScreenPositionLiteral implements IConversionTool
		
		public readonly property Description, string, "Change CLS/DspAt    DISPLAY (15,$SCR_CLR(SCREEN),$SCR_POS(r,c),'text')"

		public method DoConvert, @List<OperationResult>
			files, @List<String> 
			testMode, Boolean 
			createFilesInTestMode, Boolean 
			out summaryMessage, String 
			endparams
		proc
			data results, @List<OperationResult>, new List<OperationResult>()
			data filesModified, int
			data linesModified, int
			data totalChanges, int
			
			data filename, String
			foreach filename in files
			begin
				data fileModified, boolean, false
				
				;;Get the data for the file
				data sourcelines, @List<String>, new List<String>(File.ReadAllLines(filename))
				
				data sourceline, String
				data sourceLineIndex, int, -1
				
				while ((sourceLineIndex += 1) < sourcelines.Count)
				begin
					sourceline = sourcelines[sourceLineIndex]
					
					;;Skip blank lines
					if (string.IsNullOrWhiteSpace(sourceline))
						nextloop
					
					;;Skip lines that only have a comment
					if (sourceline.Trim().StartsWith(";"))
						nextloop
						
					;;DISPLAY (15,$SCR_CLR(SCREEN),$SCR_POS(3,5),'CY = Current year')
					
					if (!sourceline.ToUpper().Contains("DISPLAY (15,$SCR_CLR(SCREEN),$SCR_POS("))
						nextloop
					
					data startPos, int, sourceline.ToUpper().IndexOf("DISPLAY (15,$SCR_CLR(SCREEN),$SCR_POS(")
					data rowPos,   int, sourceline.ToUpper().IndexOf("$SCR_POS(") + 9
					data colPos,   int, sourceline.IndexOf(",",rowPos+1) + 1
					data endOfPos, int, sourceline.IndexOf(")",colPos+1)
					
					;;Make sure we're looking good so far
					if ((rowPos==-1)||(colPos==-1)||(endOfPos==-1))
						nextloop
						
					;;The character after the end of position ) should be a comma
					if (sourceline.Substring(endOfPos+1,1)!=",")
						nextloop

					data ix, int
						
					;;The character after that should be a ' or "
					data openQuotePos, int, endOfPos + 2
					data closeQuotePos, int
					if (sourceline.Substring(openQuotePos,1)=='"')  then
					begin
						;;Found a double quote quoted string
						;;Wind forward until we find the first matching " and make sure it is followed by a )
						;;We don't want to mess with things like "abc",def,"GHI"
						for ix from openQuotePos+1 thru sourceLine.Length - 1
						begin
							if (sourceline.Substring(ix,1)=='"')
							begin
								closeQuotePos = ix
								exitloop
							end
						end
					end
					else if (sourceline.Substring(openQuotePos,1)=="'") then
					begin
						;;Found a single quote quoted string
						;;Wind forward until we find the first matching " and make sure it is followed by a )
						;;We don't want to mess with things like "abc",def,"GHI"
						for ix from openQuotePos+1 thru sourceLine.Length - 1
						begin
							if (sourceline.Substring(ix,1)=="'")
							begin
								closeQuotePos = ix
								exitloop
							end
						end
					end
					else
						nextloop
						
					data endPos, int
					if (closeQuotePos==-1) then
						nextloop
					else
					begin
						if (((ix+1)<=(sourceLine.Length-1))&&(sourceline.Substring(ix+1,1)==")")) then
							endPos = closeQuotePos + 1								
						else
							nextloop
					end

					data row, string, sourceline.Substring(rowPos,colPos-rowPos-1)
					data col, string, sourceline.Substring(colPos,endOfPos-colPos)
					data text, String, sourceline.Substring(openQuotePos,closeQuotePos-openQuotePos+1)
					
					sourceline = sourceline.Replace(sourceline.Substring(startPos,endPos-startPos+1),String.Format("UI.ClearScreenAndDisplayTextAt({0},{1},{2})",row,col,text))
					sourcelines[sourceLineIndex] = sourceline
					linesModified += 1
					totalChanges += 1
					fileModified = true
				end
				
				if (fileModified)
				begin
					filesModified += 1
					if (testMode) then
					begin
						data testFile, String, Path.Combine(Path.GetDirectoryName(filename),Path.GetFileNameWithoutExtension(filename)+".TEST")
						if (createFilesInTestMode) then
						begin
							File.WriteAllLines(testFile,sourcelines)
							results.Add(new OperationResult(filename,0,string.Format("TEST MODE: OUTPUT SAVED TO {0}",testFile)))
						end
						else
							results.Add(new OperationResult(filename,0,string.Format("TEST MODE: WOULD HAVE MODIFIED {0}",filename)))
					end	
					else
					begin
						data saveFile, String, Path.Combine(Path.GetDirectoryName(filename),Path.GetFileNameWithoutExtension(filename)+".SAVE")
						try
						begin
							File.Copy(filename,saveFile)
							File.WriteAllLines(filename,sourcelines)
							results.Add(new OperationResult(filename,0,string.Format("MODIFIED {0}. Original code saved in {1}.",filename,saveFile)))
						end
						catch (e, @Exception)
						begin
							results.Add(new OperationResult(filename,0,string.Format("FAILED TO MODIFY OR BACKUP {0}.",filename)))
						end
						endtry
					end				
				end
			end
			
			summaryMessage = String.Format("Processed {0} files. Made {1} changes to {2} lines in {3} files.",files.Count,totalChanges,linesModified,filesModified)
			
			mreturn results
			
		endmethod
		
	endclass
	
endnamespace
