
import System
import System.Collections.Generic
import CodeConverterInterface

namespace CodeConverterSampleTasks

	public class SearchForVmsSpecificRoutines implements IConversionTool

		public readonly property Description, string, "Find OpenVMS specific routines"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			data results, @List<OperationResult>, new List<OperationResult>()
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"ASTRST",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"ASTSAV",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"CREMBX",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"DBL$DEVCLT",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"DBL$EXECUTE_IMAGE_ROUTINE",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"DBL$SETKRF",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"DBL$SNDOPR",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"DELMBX",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"EMPBUF",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"ENDFL",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"FXSUBR",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"GETCM",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"PURGE",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"PUTCM",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"SETCTL",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"SORT",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"TT_NAME_TO_NUMBER",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"TT_NUMBER_TO_NAME",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"TTBRDCST",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"TTCHAR",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"TTMBX",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"VMCMD",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForExternalSubroutine(files,"VMMSG",false,summaryMessage))
			results.AddRange(SearchHelpers.SearchForString(files,"^XTRNL",summaryMessage))

			;TODO: When we have a reliable way of searching for external functions we should also check:
			;	%FSTAT
			;	%SUCCESS



			summaryMessage = String.Format("Searched {0} files for OpenVMS specific routines. Found {1} matches.",files.Count,results.Count)

			mreturn results

		endmethod
	endclass
	
	public class SearchForOpenPipe implements IConversionTool

		public readonly property Description, string, "Find open pipe commands"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			mreturn SearchHelpers.SearchForStatementAndContains(files,"OPEN","|",summaryMessage)
		endmethod
	endclass
	
	public class SearchForOpenTerminal implements IConversionTool

		public readonly property Description, string, "Find open terminal statements"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			mreturn SearchHelpers.SearchForStatementAndContains(files,"OPEN","TT:",summaryMessage)
		endmethod
	endclass
	
	public class SearchForXcallShell implements IConversionTool

		public readonly property Description, string, "Find XCALL SHELL"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			mreturn SearchHelpers.SearchForExternalSubroutine(files,"SHELL",false,summaryMessage)
		endmethod
	endclass
	
	public class SearchForXcallSpawn implements IConversionTool

		public readonly property Description, string, "Find XCALL SPAWN"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			mreturn SearchHelpers.SearchForExternalSubroutine(files,"SPAWN",false,summaryMessage)
		endmethod
	endclass
	
	public class SearchForEscape implements IConversionTool

		public readonly property Description, string, "Find <ESC> characters in source code"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			mreturn SearchHelpers.SearchForNonPrintableCharacter(files,%char(27),"<ESC>",summaryMessage)
		endmethod
	endclass

	public class SearchForLineFeed implements IConversionTool

		public readonly property Description, string, "Find <LF> characters in source code"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			mreturn SearchHelpers.SearchForNonPrintableCharacter(files,%char(10),"<LF>",summaryMessage)
		endmethod
	endclass
	
	public class SearchForFormFeed implements IConversionTool

		public readonly property Description, string, "Find <FF> characters in source code"

		public method DoConvert, @List<OperationResult>
			required in  files, @List<String> 
			required in  testMode, Boolean 
			required in  createFilesInTestMode, Boolean 
			required out summaryMessage, String
			endparams
		proc
			mreturn SearchHelpers.SearchForNonPrintableCharacter(files,%char(12),"<FF>",summaryMessage)
		endmethod
	endclass
	
endnamespace
