
import System
import System.Collections.Generic
import CodeConverterInterface

namespace CodeConverterSampleTasks

	public class SearchForVmsSpecificRoutines implements ISearchTool

		public readonly property Description, string, "Find OpenVMS specific routines"

		public method DoSearch, @List<SearchResult>
			required in    filespec, string
			required inout allFileContent, String
			required inout sourceLines, @List<string>
		proc

			data tokens = new List<String>() {"ASTRST","ASTSAV","CREMBX","DBL$DEVCLT","DBL$EXECUTE_IMAGE_ROUTINE","DBL$SETKRF","DBL$SNDOPR","DELMBX","EMPBUF","ENDFL","FXSUBR","GETCM","PURGE","PUTCM","SETCTL","SORT","TT_NAME_TO_NUMBER","TT_NUMBER_TO_NAME","TTBRDCST","TTCHAR","TTMBX","VMCMD","VMMSG"}
			data results = SearchHelpers.SearchForExternalSubroutine(filespec,allFileContent,sourceLines,tokens)

			tokens = new List<String>() {"^XTRNL"}
			results.AddRange(SearchHelpers.SearchForString(filespec,allFileContent,sourceLines,tokens))

			tokens = new List<String>() {"FSTAT", "SUCCESS"}
			results.AddRange(SearchHelpers.SearchForSubroutineOrFunction(filespec,allFileContent,sourceLines,tokens))

			mreturn results

		endmethod
	endclass
	
;	public class SearchForOpenPipe implements IConversionToolOld
;
;		public readonly property Description, string, "Find open pipe commands"
;
;		public method DoConvert, @List<OperationResult>
;			required in  files, @List<String> 
;			required in  testMode, Boolean 
;			required in  createFilesInTestMode, Boolean 
;			required out summaryMessage, String
;			endparams
;		proc
;			mreturn SearchHelpers.SearchForStatementAndContains(files,"OPEN","|",summaryMessage)
;		endmethod
;	endclass
;	
;	public class SearchForOpenTerminal implements IConversionToolOld
;
;		public readonly property Description, string, "Find open terminal statements"
;
;		public method DoConvert, @List<OperationResult>
;			required in  files, @List<String> 
;			required in  testMode, Boolean 
;			required in  createFilesInTestMode, Boolean 
;			required out summaryMessage, String
;			endparams
;		proc
;			mreturn SearchHelpers.SearchForStatementAndContains(files,"OPEN","TT:",summaryMessage)
;		endmethod
;	endclass
	
	public class SearchForShellSpawn implements ISearchTool

		public readonly property Description, string, "Find XCALL SHELL and SPAWN"

		public method DoSearch, @List<SearchResult>
			required in    filespec, string
			required inout allFileContent, String
			required inout sourceLines, @List<string>
		proc
			data tokens = new List<String>() {"SHELL", "SPAWN"}
			data results = SearchHelpers.SearchForExternalSubroutine(filespec,allFileContent,sourceLines,tokens)
			mreturn results
		endmethod

	endclass
	
	public class SearchForEscape implements ISearchTool

		public readonly property Description, string, "Find <ESC> characters in source code"

		public method DoSearch, @List<SearchResult>
			required in    filespec, string
			required inout allFileContent, String
			required inout sourceLines, @List<string>
		proc
			mreturn SearchHelpers.SearchForNonPrintableCharacter(filespec,allFileContent,sourceLines,(Char)%char(27),"<ESC>")
		endmethod
	endclass

	public class SearchForLineFeed implements ISearchTool

		public readonly property Description, string, "Find <LF> characters in source code"

		public method DoSearch, @List<SearchResult>
			required in    filespec, string
			required inout allFileContent, String
			required inout sourceLines, @List<string>
		proc
			mreturn SearchHelpers.SearchForNonPrintableCharacter(filespec,allFileContent,sourceLines,(Char)%char(10),"<LF>")
		endmethod
	endclass
	
	public class SearchForFormFeed implements ISearchTool

		public readonly property Description, string, "Find <FF> characters in source code"

		public method DoSearch, @List<SearchResult>
			required in    filespec, string
			required inout allFileContent, String
			required inout sourceLines, @List<string>
		proc
			mreturn SearchHelpers.SearchForNonPrintableCharacter(filespec,allFileContent,sourceLines,(Char)%char(12),"<FF>")
		endmethod
	endclass

	public class SearchForA implements ISearchTool

		public readonly property Description, string, "Find A characters in source code"

		public method DoSearch, @List<SearchResult>
			required in    filespec, string
			required inout allFileContent, String
			required inout sourceLines, @List<string>
		proc
			mreturn SearchHelpers.SearchForNonPrintableCharacter(filespec,allFileContent,sourceLines,(Char)%char(65),"A")
		endmethod
	endclass

	
endnamespace
